{"version":3,"sources":["logo.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","App","useState","byClassData","setByClassData","byFacultyData","setByFacultyData","useEffect","fetch","then","response","json","data","sort","a","b","class","map","x","faculty","Set","y","i","arr","filter","z","length","groupedByFaculty","reduce","acc","forEach","classesForExistingFaculty","get","set","Map","arrayOfObjectsFromMap","classes","byClass","setByClass","toggleByClass","className","onClick","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.492fa9c5.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { useState, useEffect } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\nfunction App() {\n\n  const [byClassData, setByClassData] = useState([]);\n  const [byFacultyData, setByFacultyData] = useState([]);\n\n  useEffect(() =>\n    // Function\n    {\n        fetch('https://d8h5trh1tb.execute-api.us-east-2.amazonaws.com/dev/semester/semester:Fall%202020')\n          .then(\n            response => response.json()\n          ).then(\n            data => {\n\n              setByClassData([\n                ...data[0].data\n                  .sort((a, b) => a.class == b.class ? 0 : a.class < b.class ? -1 : 1)\n                  .map(x => ({\n                    ...x\n                    , faculty: [\n                        ...new Set(\n                          [...x.faculty]\n                            .sort()\n                            .map((y, i, arr) => `${y} ${arr.filter(z => z === y).length > 1 ? '(' + arr.filter(z => z === y).length + ' sections)' : ''}`)\n                        )\n                      ]\n                  }))\n              ]);\n\n              const groupedByFaculty = data[0].data\n                .reduce(\n                  (acc, x) => {\n                    x.faculty.forEach(y => {\n                      const classesForExistingFaculty = acc.get(y);\n\n                      classesForExistingFaculty \n                        ? acc.set(y, [...classesForExistingFaculty, x.class]) \n                        : acc.set(y, [x.class])\n                    })\n\n                    return acc;\n                  }\n                  , new Map()\n                );\n                \n              const arrayOfObjectsFromMap = [...groupedByFaculty]\n                .map(x => ({\n                    faculty: x[0]\n                    , classes: [\n                      ...new Set(\n                        x[1]\n                          .sort()\n                          .map((y, i, arr) => `${y} ${arr.filter(z => z === y).length > 1 ? '(' + arr.filter(z => z === y).length + ' sections)' : ''}`)\n                      )\n                    ]\n                  })\n                )\n                .sort((a, b) => a.faculty == b.faculty ? 0 : a.faculty < b.faculty ? -1 : 1)\n              ;\n              \n              //console.log(arrayOfObjectsFromMap);\n              setByFacultyData(arrayOfObjectsFromMap);\n            }\n          );\n    }\n    // Dependency array. Empty means do it once ! ! !\n    , []\n  );\n\n  let [byClass, setByClass] = useState(true);\n  const toggleByClass = () => setByClass(byClass = !byClass);\n\n  return (\n    <>\n      <div\n        className='jumbotron'\n      >\n          <h5\n            className='text-secondary'\n          >\n            Madison College IT Classes\n          </h5>\n          <h2\n            className='text-primary'\n          >\n            <button\n              className='btn btn-outline-primary mr-3 disabled'\n            >\n              &lt;\n            </button>\n              Fall 2020\n            <button\n              className='btn btn-outline-primary ml-3 disabled'\n            >\n              &gt;\n            </button>\n          </h2>    \n      </div>\n      <div\n        className='container'\n      >\n        <div\n          className='btn-group mb-3'\n        >\n          <button\n            className={byClass ? 'btn btn-secondary' : 'btn btn-outline-secondary'}\n            onClick={toggleByClass}\n          >\n            By Class ({byClassData.length})\n          </button>\n          <button\n            className={byClass ? 'btn btn-outline-secondary' : 'btn btn-secondary'}\n            onClick={toggleByClass}\n          >\n            By Faculty ({byFacultyData.length})\n          </button>\n        </div>\n\n        { \n          byClass\n            ? byClassData.map(x => (\n                <div\n                  className='card mb-3'\n                >\n                  <h5\n                    className='card-header'\n                  >\n                    { x.class }\n                  </h5>\n                  <div\n                    className='card-body'\n                  >\n                    {\n                      x.faculty.map(y => (\n                          <p>{y}</p>\n                        )\n                      )\n                    }\n                  </div>\n                </div>\n              )\n            )\n            : byFacultyData.map(x => (\n              <div\n                className='card mb-3'\n              >\n                <h5\n                  className='card-header'\n                >\n                  { x.faculty }\n                </h5>\n                <div\n                  className='card-body'\n                >\n                  {\n                    x.classes.map(y => (\n                        <p>{y}</p>\n                      )\n                    )\n                  }\n                </div>\n              </div>\n            )\n          )\n      }\n      </div>  \n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}